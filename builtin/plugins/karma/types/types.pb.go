// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/loomnetwork/loomchain/builtin/plugins/karma/types/types.proto

/*
Package karma is a generated protocol buffer package.

It is generated from these files:
	github.com/loomnetwork/loomchain/builtin/plugins/karma/types/types.proto

It has these top-level messages:
	KarmaParams
	KarmaUser
	KarmaParamsOracle
	KarmaParamsOracleNewMaxKarma
	KarmaParamsOracleNewOracle
	KarmaConfig
	KarmaSource
	KarmaState
	KarmaStateUser
	KarmaStateKeyUser
	KarmaInitRequest
	KarmaUserToken
	KarmaTotal
*/
package karma

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KarmaParams struct {
	MaxKarma            float64            `protobuf:"fixed64,1,opt,name=max_karma,json=maxKarma,proto3" json:"max_karma,omitempty"`
	OraclePublicAddress string             `protobuf:"bytes,2,opt,name=oracle_public_address,json=oraclePublicAddress,proto3" json:"oracle_public_address,omitempty"`
	Sources             map[string]float64 `protobuf:"bytes,3,rep,name=sources" json:"sources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *KarmaParams) Reset()                    { *m = KarmaParams{} }
func (m *KarmaParams) String() string            { return proto.CompactTextString(m) }
func (*KarmaParams) ProtoMessage()               {}
func (*KarmaParams) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *KarmaParams) GetMaxKarma() float64 {
	if m != nil {
		return m.MaxKarma
	}
	return 0
}

func (m *KarmaParams) GetOraclePublicAddress() string {
	if m != nil {
		return m.OraclePublicAddress
	}
	return ""
}

func (m *KarmaParams) GetSources() map[string]float64 {
	if m != nil {
		return m.Sources
	}
	return nil
}

type KarmaUser struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *KarmaUser) Reset()                    { *m = KarmaUser{} }
func (m *KarmaUser) String() string            { return proto.CompactTextString(m) }
func (*KarmaUser) ProtoMessage()               {}
func (*KarmaUser) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *KarmaUser) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type KarmaParamsOracle struct {
	Params *KarmaParams `protobuf:"bytes,1,opt,name=Params" json:"Params,omitempty"`
	Oracle *KarmaUser   `protobuf:"bytes,2,opt,name=Oracle" json:"Oracle,omitempty"`
}

func (m *KarmaParamsOracle) Reset()                    { *m = KarmaParamsOracle{} }
func (m *KarmaParamsOracle) String() string            { return proto.CompactTextString(m) }
func (*KarmaParamsOracle) ProtoMessage()               {}
func (*KarmaParamsOracle) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *KarmaParamsOracle) GetParams() *KarmaParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *KarmaParamsOracle) GetOracle() *KarmaUser {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type KarmaParamsOracleNewMaxKarma struct {
	MaxKarma float64    `protobuf:"fixed64,1,opt,name=max_karma,json=maxKarma,proto3" json:"max_karma,omitempty"`
	Oracle   *KarmaUser `protobuf:"bytes,2,opt,name=Oracle" json:"Oracle,omitempty"`
}

func (m *KarmaParamsOracleNewMaxKarma) Reset()         { *m = KarmaParamsOracleNewMaxKarma{} }
func (m *KarmaParamsOracleNewMaxKarma) String() string { return proto.CompactTextString(m) }
func (*KarmaParamsOracleNewMaxKarma) ProtoMessage()    {}
func (*KarmaParamsOracleNewMaxKarma) Descriptor() ([]byte, []int) {
	return fileDescriptorTypes, []int{3}
}

func (m *KarmaParamsOracleNewMaxKarma) GetMaxKarma() float64 {
	if m != nil {
		return m.MaxKarma
	}
	return 0
}

func (m *KarmaParamsOracleNewMaxKarma) GetOracle() *KarmaUser {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type KarmaParamsOracleNewOracle struct {
	NewOraclePublicAddress string     `protobuf:"bytes,1,opt,name=new_oracle_public_address,json=newOraclePublicAddress,proto3" json:"new_oracle_public_address,omitempty"`
	Oracle                 *KarmaUser `protobuf:"bytes,2,opt,name=Oracle" json:"Oracle,omitempty"`
}

func (m *KarmaParamsOracleNewOracle) Reset()                    { *m = KarmaParamsOracleNewOracle{} }
func (m *KarmaParamsOracleNewOracle) String() string            { return proto.CompactTextString(m) }
func (*KarmaParamsOracleNewOracle) ProtoMessage()               {}
func (*KarmaParamsOracleNewOracle) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *KarmaParamsOracleNewOracle) GetNewOraclePublicAddress() string {
	if m != nil {
		return m.NewOraclePublicAddress
	}
	return ""
}

func (m *KarmaParamsOracleNewOracle) GetOracle() *KarmaUser {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type KarmaConfig struct {
	MaxKarma       float64            `protobuf:"fixed64,1,opt,name=max_karma,json=maxKarma,proto3" json:"max_karma,omitempty"`
	Oracle         *KarmaUser         `protobuf:"bytes,2,opt,name=Oracle" json:"Oracle,omitempty"`
	Sources        map[string]float64 `protobuf:"bytes,3,rep,name=sources" json:"sources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	LastUpdateTime int64              `protobuf:"varint,4,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (m *KarmaConfig) Reset()                    { *m = KarmaConfig{} }
func (m *KarmaConfig) String() string            { return proto.CompactTextString(m) }
func (*KarmaConfig) ProtoMessage()               {}
func (*KarmaConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *KarmaConfig) GetMaxKarma() float64 {
	if m != nil {
		return m.MaxKarma
	}
	return 0
}

func (m *KarmaConfig) GetOracle() *KarmaUser {
	if m != nil {
		return m.Oracle
	}
	return nil
}

func (m *KarmaConfig) GetSources() map[string]float64 {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *KarmaConfig) GetLastUpdateTime() int64 {
	if m != nil {
		return m.LastUpdateTime
	}
	return 0
}

type KarmaSource struct {
	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Reward float64 `protobuf:"fixed64,2,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (m *KarmaSource) Reset()                    { *m = KarmaSource{} }
func (m *KarmaSource) String() string            { return proto.CompactTextString(m) }
func (*KarmaSource) ProtoMessage()               {}
func (*KarmaSource) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *KarmaSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KarmaSource) GetReward() float64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

type KarmaState struct {
	SourceStates   map[string]float64 `protobuf:"bytes,1,rep,name=source_states,json=sourceStates" json:"source_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	LastUpdateTime int64              `protobuf:"varint,2,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (m *KarmaState) Reset()                    { *m = KarmaState{} }
func (m *KarmaState) String() string            { return proto.CompactTextString(m) }
func (*KarmaState) ProtoMessage()               {}
func (*KarmaState) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *KarmaState) GetSourceStates() map[string]float64 {
	if m != nil {
		return m.SourceStates
	}
	return nil
}

func (m *KarmaState) GetLastUpdateTime() int64 {
	if m != nil {
		return m.LastUpdateTime
	}
	return 0
}

type KarmaStateUser struct {
	SourceStates map[string]float64 `protobuf:"bytes,1,rep,name=source_states,json=sourceStates" json:"source_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	User         *KarmaUser         `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
	Oracle       *KarmaUser         `protobuf:"bytes,3,opt,name=Oracle" json:"Oracle,omitempty"`
}

func (m *KarmaStateUser) Reset()                    { *m = KarmaStateUser{} }
func (m *KarmaStateUser) String() string            { return proto.CompactTextString(m) }
func (*KarmaStateUser) ProtoMessage()               {}
func (*KarmaStateUser) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *KarmaStateUser) GetSourceStates() map[string]float64 {
	if m != nil {
		return m.SourceStates
	}
	return nil
}

func (m *KarmaStateUser) GetUser() *KarmaUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *KarmaStateUser) GetOracle() *KarmaUser {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type KarmaStateKeyUser struct {
	StateKeys []string   `protobuf:"bytes,1,rep,name=state_keys,json=stateKeys" json:"state_keys,omitempty"`
	User      *KarmaUser `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
	Oracle    *KarmaUser `protobuf:"bytes,3,opt,name=Oracle" json:"Oracle,omitempty"`
}

func (m *KarmaStateKeyUser) Reset()                    { *m = KarmaStateKeyUser{} }
func (m *KarmaStateKeyUser) String() string            { return proto.CompactTextString(m) }
func (*KarmaStateKeyUser) ProtoMessage()               {}
func (*KarmaStateKeyUser) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *KarmaStateKeyUser) GetStateKeys() []string {
	if m != nil {
		return m.StateKeys
	}
	return nil
}

func (m *KarmaStateKeyUser) GetUser() *KarmaUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *KarmaStateKeyUser) GetOracle() *KarmaUser {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type KarmaInitRequest struct {
	Params *KarmaParams `protobuf:"bytes,1,opt,name=Params" json:"Params,omitempty"`
}

func (m *KarmaInitRequest) Reset()                    { *m = KarmaInitRequest{} }
func (m *KarmaInitRequest) String() string            { return proto.CompactTextString(m) }
func (*KarmaInitRequest) ProtoMessage()               {}
func (*KarmaInitRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *KarmaInitRequest) GetParams() *KarmaParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type KarmaUserToken struct {
	Owner      *KarmaUser `protobuf:"bytes,1,opt,name=Owner" json:"Owner,omitempty"`
	TokenCount float64    `protobuf:"fixed64,2,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`
}

func (m *KarmaUserToken) Reset()                    { *m = KarmaUserToken{} }
func (m *KarmaUserToken) String() string            { return proto.CompactTextString(m) }
func (*KarmaUserToken) ProtoMessage()               {}
func (*KarmaUserToken) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *KarmaUserToken) GetOwner() *KarmaUser {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *KarmaUserToken) GetTokenCount() float64 {
	if m != nil {
		return m.TokenCount
	}
	return 0
}

type KarmaTotal struct {
	Count float64 `protobuf:"fixed64,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *KarmaTotal) Reset()                    { *m = KarmaTotal{} }
func (m *KarmaTotal) String() string            { return proto.CompactTextString(m) }
func (*KarmaTotal) ProtoMessage()               {}
func (*KarmaTotal) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *KarmaTotal) GetCount() float64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*KarmaParams)(nil), "karma.KarmaParams")
	proto.RegisterType((*KarmaUser)(nil), "karma.KarmaUser")
	proto.RegisterType((*KarmaParamsOracle)(nil), "karma.KarmaParamsOracle")
	proto.RegisterType((*KarmaParamsOracleNewMaxKarma)(nil), "karma.KarmaParamsOracleNewMaxKarma")
	proto.RegisterType((*KarmaParamsOracleNewOracle)(nil), "karma.KarmaParamsOracleNewOracle")
	proto.RegisterType((*KarmaConfig)(nil), "karma.KarmaConfig")
	proto.RegisterType((*KarmaSource)(nil), "karma.KarmaSource")
	proto.RegisterType((*KarmaState)(nil), "karma.KarmaState")
	proto.RegisterType((*KarmaStateUser)(nil), "karma.KarmaStateUser")
	proto.RegisterType((*KarmaStateKeyUser)(nil), "karma.KarmaStateKeyUser")
	proto.RegisterType((*KarmaInitRequest)(nil), "karma.KarmaInitRequest")
	proto.RegisterType((*KarmaUserToken)(nil), "karma.KarmaUserToken")
	proto.RegisterType((*KarmaTotal)(nil), "karma.KarmaTotal")
}

func init() {
	proto.RegisterFile("github.com/loomnetwork/loomchain/builtin/plugins/karma/types/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0x96, 0x9b, 0x36, 0x25, 0x93, 0x52, 0xa5, 0x06, 0xaa, 0x50, 0x40, 0x8d, 0x96, 0xbf, 0x88,
	0x43, 0x22, 0x85, 0x0b, 0xed, 0x01, 0x84, 0x2a, 0xa4, 0xa2, 0x02, 0xad, 0x96, 0xf6, 0xc0, 0x69,
	0xe5, 0x6c, 0x4c, 0xbb, 0xca, 0xae, 0x1d, 0x6c, 0x2f, 0x69, 0x8e, 0xf0, 0x66, 0x3c, 0x04, 0xcf,
	0xc1, 0x89, 0x3b, 0xf2, 0xd8, 0x2b, 0x16, 0x65, 0xe9, 0x8f, 0xda, 0x4b, 0xe4, 0x99, 0xf9, 0x66,
	0xe6, 0xfb, 0xc6, 0x13, 0x2f, 0xec, 0x1e, 0x27, 0xe6, 0x24, 0x1f, 0xf6, 0x62, 0x99, 0xf5, 0x53,
	0x29, 0x33, 0xc1, 0xcd, 0x54, 0xaa, 0x31, 0x9e, 0xe3, 0x13, 0x96, 0x88, 0xfe, 0x30, 0x4f, 0x52,
	0x93, 0x88, 0xfe, 0x24, 0xcd, 0x8f, 0x13, 0xa1, 0xfb, 0x63, 0xa6, 0x32, 0xd6, 0x37, 0xb3, 0x09,
	0xd7, 0xee, 0xb7, 0x37, 0x51, 0xd2, 0x48, 0xba, 0x84, 0x81, 0xe0, 0x27, 0x81, 0xe6, 0x9e, 0x3d,
	0x1d, 0x30, 0xc5, 0x32, 0x4d, 0xef, 0x41, 0x23, 0x63, 0xa7, 0x11, 0x06, 0xdb, 0xa4, 0x43, 0xba,
	0x24, 0xbc, 0x91, 0xb1, 0x53, 0x84, 0xd0, 0x01, 0xdc, 0x91, 0x8a, 0xc5, 0x29, 0x8f, 0x26, 0xf9,
	0x30, 0x4d, 0xe2, 0x88, 0x8d, 0x46, 0x8a, 0x6b, 0xdd, 0x5e, 0xe8, 0x90, 0x6e, 0x23, 0xbc, 0xe5,
	0x82, 0x07, 0x18, 0x7b, 0xed, 0x42, 0x74, 0x0b, 0x96, 0xb5, 0xcc, 0x55, 0xcc, 0x75, 0xbb, 0xd6,
	0xa9, 0x75, 0x9b, 0x83, 0xcd, 0x1e, 0x16, 0xef, 0x95, 0xba, 0xf6, 0x3e, 0x3a, 0xc4, 0x1b, 0x61,
	0xd4, 0x2c, 0x2c, 0xf0, 0x1b, 0xdb, 0xb0, 0x52, 0x0e, 0xd0, 0x16, 0xd4, 0xc6, 0x7c, 0x86, 0xac,
	0x1a, 0xa1, 0x3d, 0xd2, 0xdb, 0xb0, 0xf4, 0x95, 0xa5, 0x39, 0x47, 0x02, 0x24, 0x74, 0xc6, 0xf6,
	0xc2, 0x0b, 0x12, 0x3c, 0x86, 0x06, 0x36, 0x38, 0xd2, 0x5c, 0xd1, 0x36, 0x2c, 0x17, 0x4c, 0x5d,
	0x72, 0x61, 0x06, 0x09, 0xac, 0x95, 0x78, 0xec, 0x23, 0x7f, 0xfa, 0x0c, 0xea, 0xce, 0x46, 0x74,
	0x73, 0x40, 0xe7, 0x19, 0x87, 0x1e, 0x41, 0xbb, 0x50, 0x77, 0x59, 0x48, 0xa1, 0x39, 0x68, 0x95,
	0xb1, 0xb6, 0x79, 0xe8, 0xe3, 0x01, 0x87, 0xfb, 0x73, 0xad, 0x3e, 0xf0, 0xe9, 0xfb, 0x62, 0xb8,
	0x67, 0x4e, 0xfe, 0xe2, 0x6d, 0xbe, 0x11, 0xd8, 0xa8, 0xea, 0xe3, 0xb5, 0x6d, 0xc1, 0x5d, 0xc1,
	0xa7, 0x51, 0xf5, 0x35, 0xba, 0xe1, 0xac, 0x8b, 0x02, 0xfd, 0xef, 0x4d, 0x5e, 0x9c, 0xc3, 0xef,
	0x62, 0xa9, 0x76, 0xa4, 0xf8, 0x9c, 0x1c, 0x5f, 0x93, 0xb4, 0x73, 0x56, 0xc9, 0xf5, 0xaa, 0x5e,
	0x25, 0xda, 0x85, 0x56, 0xca, 0xb4, 0x89, 0xf2, 0xc9, 0x88, 0x19, 0x1e, 0x99, 0x24, 0xe3, 0xed,
	0xc5, 0x0e, 0xe9, 0xd6, 0xc2, 0x55, 0xeb, 0x3f, 0x42, 0xf7, 0x61, 0x92, 0xf1, 0x2b, 0x2d, 0xdd,
	0x96, 0x97, 0xed, 0x0a, 0x50, 0x0a, 0x8b, 0x82, 0x65, 0xdc, 0xe7, 0xe2, 0x99, 0xae, 0x43, 0x5d,
	0xf1, 0x29, 0x53, 0x23, 0x9f, 0xed, 0xad, 0xe0, 0x07, 0x01, 0x70, 0xb9, 0x86, 0x19, 0x4e, 0x77,
	0xe1, 0xa6, 0xa3, 0x1e, 0x69, 0x6b, 0xdb, 0xab, 0xb1, 0x82, 0x1f, 0x96, 0x05, 0x23, 0xd2, 0xeb,
	0xc5, 0xb3, 0x17, 0xbd, 0xa2, 0x4b, 0xae, 0x4a, 0xe5, 0x0b, 0x95, 0xca, 0x5f, 0xc1, 0xda, 0x5c,
	0xb1, 0x4b, 0xc9, 0xff, 0x45, 0x60, 0xf5, 0x2f, 0x33, 0xfc, 0xe7, 0xbd, 0xab, 0xd6, 0xf1, 0x74,
	0x4e, 0x87, 0x45, 0x9f, 0xab, 0xe5, 0x11, 0x2c, 0x5a, 0xdc, 0x7f, 0x17, 0x05, 0xa3, 0xa5, 0x85,
	0xaa, 0x9d, 0xbd, 0x50, 0x57, 0x57, 0xfc, 0x9d, 0xf8, 0xf7, 0x03, 0x0b, 0xec, 0xf1, 0x19, 0x12,
	0x78, 0x00, 0x80, 0x6a, 0xa3, 0x31, 0x9f, 0x39, 0xc5, 0x8d, 0xb0, 0xa1, 0x3d, 0xe2, 0xda, 0x55,
	0x04, 0x2f, 0xa1, 0x85, 0xce, 0xb7, 0x22, 0x31, 0x21, 0xff, 0x92, 0x73, 0x6d, 0x2e, 0xf3, 0x84,
	0x05, 0x9f, 0xfc, 0xad, 0xd9, 0xa2, 0x87, 0x72, 0xcc, 0x05, 0x7d, 0x02, 0x4b, 0xfb, 0x53, 0xc1,
	0x95, 0x4f, 0x9e, 0x6f, 0xed, 0xc2, 0x74, 0x13, 0x9a, 0xc6, 0x26, 0x44, 0xb1, 0xcc, 0x85, 0xf1,
	0xe3, 0x01, 0x74, 0xed, 0x58, 0x4f, 0x10, 0xf8, 0xa5, 0x3e, 0x94, 0x86, 0xa5, 0x76, 0x8e, 0x0e,
	0xe8, 0x9e, 0x00, 0x67, 0x0c, 0xeb, 0xf8, 0x3d, 0x7a, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x08,
	0xf0, 0xaa, 0x62, 0xdb, 0x06, 0x00, 0x00,
}
