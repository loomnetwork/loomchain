// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/loomnetwork/loomchain/builtin/plugins/gateway/gateway.proto

/*
Package gateway is a generated protocol buffer package.

It is generated from these files:
	github.com/loomnetwork/loomchain/builtin/plugins/gateway/gateway.proto

It has these top-level messages:
	GatewayState
	TokenDeposit
	NFTDeposit
	GatewayTokenMapping
	GatewayInitRequest
	ProcessEventBatchRequest
	GatewayStateRequest
	GatewayStateResponse
*/
package gateway

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/loomnetwork/go-loom/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GatewayState struct {
	LastEthBlock uint64 `protobuf:"varint,1,opt,name=last_eth_block,json=lastEthBlock,proto3" json:"last_eth_block,omitempty"`
}

func (m *GatewayState) Reset()                    { *m = GatewayState{} }
func (m *GatewayState) String() string            { return proto.CompactTextString(m) }
func (*GatewayState) ProtoMessage()               {}
func (*GatewayState) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0} }

func (m *GatewayState) GetLastEthBlock() uint64 {
	if m != nil {
		return m.LastEthBlock
	}
	return 0
}

// Fungible Token Deposit (ETH or ERC20) made into the Gateway on Ethereum mainnet
type TokenDeposit struct {
	// Token contract address, blank if ETH
	Token *types.Address `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// Ethereum mainnet address of entity that made the deposit
	From *types.Address `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	// DAppChain address of entity that should receive the deposit
	To       *types.Address `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
	Amount   *types.BigUInt `protobuf:"bytes,4,opt,name=amount" json:"amount,omitempty"`
	EthBlock uint64         `protobuf:"varint,5,opt,name=eth_block,json=ethBlock,proto3" json:"eth_block,omitempty"`
}

func (m *TokenDeposit) Reset()                    { *m = TokenDeposit{} }
func (m *TokenDeposit) String() string            { return proto.CompactTextString(m) }
func (*TokenDeposit) ProtoMessage()               {}
func (*TokenDeposit) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1} }

func (m *TokenDeposit) GetToken() *types.Address {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *TokenDeposit) GetFrom() *types.Address {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TokenDeposit) GetTo() *types.Address {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TokenDeposit) GetAmount() *types.BigUInt {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TokenDeposit) GetEthBlock() uint64 {
	if m != nil {
		return m.EthBlock
	}
	return 0
}

// Non-Fungible Token Deposit (ERC721) made into the Gateway on Ethereum mainnet
type NFTDeposit struct {
	// Token contract address
	Token    *types.Address `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	From     *types.Address `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	Uid      *types.BigUInt `protobuf:"bytes,3,opt,name=uid" json:"uid,omitempty"`
	EthBlock uint64         `protobuf:"varint,4,opt,name=eth_block,json=ethBlock,proto3" json:"eth_block,omitempty"`
}

func (m *NFTDeposit) Reset()                    { *m = NFTDeposit{} }
func (m *NFTDeposit) String() string            { return proto.CompactTextString(m) }
func (*NFTDeposit) ProtoMessage()               {}
func (*NFTDeposit) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{2} }

func (m *NFTDeposit) GetToken() *types.Address {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *NFTDeposit) GetFrom() *types.Address {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *NFTDeposit) GetUid() *types.BigUInt {
	if m != nil {
		return m.Uid
	}
	return nil
}

func (m *NFTDeposit) GetEthBlock() uint64 {
	if m != nil {
		return m.EthBlock
	}
	return 0
}

type GatewayTokenMapping struct {
	// Address of a token contract on Ethereum mainnet
	FromToken *types.Address `protobuf:"bytes,1,opt,name=from_token,json=fromToken" json:"from_token,omitempty"`
	// Address of the corresponding token contract on DAppChain
	ToToken *types.Address `protobuf:"bytes,2,opt,name=to_token,json=toToken" json:"to_token,omitempty"`
}

func (m *GatewayTokenMapping) Reset()                    { *m = GatewayTokenMapping{} }
func (m *GatewayTokenMapping) String() string            { return proto.CompactTextString(m) }
func (*GatewayTokenMapping) ProtoMessage()               {}
func (*GatewayTokenMapping) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{3} }

func (m *GatewayTokenMapping) GetFromToken() *types.Address {
	if m != nil {
		return m.FromToken
	}
	return nil
}

func (m *GatewayTokenMapping) GetToToken() *types.Address {
	if m != nil {
		return m.ToToken
	}
	return nil
}

type GatewayInitRequest struct {
	// List of oracles that the Gateway should accept data from, each oracle is identified by the
	// address of the validator node it runs in
	Oracles []*types.Address `protobuf:"bytes,1,rep,name=oracles" json:"oracles,omitempty"`
	// Address of the Gateway contract on Ethereum mainnet
	GatewayAddress *types.Address `protobuf:"bytes,2,opt,name=gateway_address,json=gatewayAddress" json:"gateway_address,omitempty"`
	// Map of token contracts on Ethereum mainnet to the corresponding token contracts on DAppChain
	Tokens []*GatewayTokenMapping `protobuf:"bytes,3,rep,name=Tokens" json:"Tokens,omitempty"`
}

func (m *GatewayInitRequest) Reset()                    { *m = GatewayInitRequest{} }
func (m *GatewayInitRequest) String() string            { return proto.CompactTextString(m) }
func (*GatewayInitRequest) ProtoMessage()               {}
func (*GatewayInitRequest) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{4} }

func (m *GatewayInitRequest) GetOracles() []*types.Address {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func (m *GatewayInitRequest) GetGatewayAddress() *types.Address {
	if m != nil {
		return m.GatewayAddress
	}
	return nil
}

func (m *GatewayInitRequest) GetTokens() []*GatewayTokenMapping {
	if m != nil {
		return m.Tokens
	}
	return nil
}

// Batch of events from the Gateway on Ethereum mainnet
type ProcessEventBatchRequest struct {
	FtDeposits  []*TokenDeposit `protobuf:"bytes,1,rep,name=ft_deposits,json=ftDeposits" json:"ft_deposits,omitempty"`
	NftDeposits []*NFTDeposit   `protobuf:"bytes,2,rep,name=nft_deposits,json=nftDeposits" json:"nft_deposits,omitempty"`
}

func (m *ProcessEventBatchRequest) Reset()                    { *m = ProcessEventBatchRequest{} }
func (m *ProcessEventBatchRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessEventBatchRequest) ProtoMessage()               {}
func (*ProcessEventBatchRequest) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{5} }

func (m *ProcessEventBatchRequest) GetFtDeposits() []*TokenDeposit {
	if m != nil {
		return m.FtDeposits
	}
	return nil
}

func (m *ProcessEventBatchRequest) GetNftDeposits() []*NFTDeposit {
	if m != nil {
		return m.NftDeposits
	}
	return nil
}

type GatewayStateRequest struct {
}

func (m *GatewayStateRequest) Reset()                    { *m = GatewayStateRequest{} }
func (m *GatewayStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GatewayStateRequest) ProtoMessage()               {}
func (*GatewayStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{6} }

type GatewayStateResponse struct {
	State *GatewayState `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *GatewayStateResponse) Reset()                    { *m = GatewayStateResponse{} }
func (m *GatewayStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GatewayStateResponse) ProtoMessage()               {}
func (*GatewayStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{7} }

func (m *GatewayStateResponse) GetState() *GatewayState {
	if m != nil {
		return m.State
	}
	return nil
}

func init() {
	proto.RegisterType((*GatewayState)(nil), "GatewayState")
	proto.RegisterType((*TokenDeposit)(nil), "TokenDeposit")
	proto.RegisterType((*NFTDeposit)(nil), "NFTDeposit")
	proto.RegisterType((*GatewayTokenMapping)(nil), "GatewayTokenMapping")
	proto.RegisterType((*GatewayInitRequest)(nil), "GatewayInitRequest")
	proto.RegisterType((*ProcessEventBatchRequest)(nil), "ProcessEventBatchRequest")
	proto.RegisterType((*GatewayStateRequest)(nil), "GatewayStateRequest")
	proto.RegisterType((*GatewayStateResponse)(nil), "GatewayStateResponse")
}

func init() {
	proto.RegisterFile("github.com/loomnetwork/loomchain/builtin/plugins/gateway/gateway.proto", fileDescriptorGateway)
}

var fileDescriptorGateway = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xf3, 0xd5, 0x74, 0x92, 0x16, 0x69, 0x29, 0x92, 0x55, 0x10, 0x8a, 0x5c, 0x24, 0x38,
	0xc0, 0x9a, 0xaf, 0x1b, 0x27, 0x22, 0x5a, 0xd4, 0x03, 0x08, 0x99, 0x72, 0xb6, 0x36, 0xce, 0xc6,
	0x5e, 0xc5, 0xd9, 0x31, 0xde, 0x31, 0x55, 0xb9, 0xf2, 0x2b, 0xf8, 0x01, 0xfc, 0x4f, 0xe4, 0xf5,
	0xba, 0x69, 0x4c, 0xb9, 0xf5, 0x62, 0xef, 0xbe, 0xf7, 0x66, 0xe6, 0x79, 0x66, 0x0c, 0x67, 0xa9,
	0xa2, 0xac, 0x5a, 0xf0, 0x04, 0x37, 0x61, 0x8e, 0xb8, 0xd1, 0x92, 0x2e, 0xb1, 0x5c, 0xdb, 0x73,
	0x92, 0x09, 0xa5, 0xc3, 0x45, 0xa5, 0x72, 0x52, 0x3a, 0x2c, 0xf2, 0x2a, 0x55, 0xda, 0x84, 0xa9,
	0x20, 0x79, 0x29, 0xae, 0xda, 0x37, 0x2f, 0x4a, 0x24, 0x3c, 0x7e, 0xf9, 0x9f, 0x3c, 0x29, 0xbe,
	0xa8, 0xaf, 0x21, 0x5d, 0x15, 0xd2, 0x34, 0xcf, 0x26, 0x22, 0x78, 0x0b, 0xd3, 0x8f, 0x4d, 0x8a,
	0xaf, 0x24, 0x48, 0xb2, 0x27, 0x70, 0x98, 0x0b, 0x43, 0xb1, 0xa4, 0x2c, 0x5e, 0xe4, 0x98, 0xac,
	0x7d, 0x6f, 0xe6, 0x3d, 0x1b, 0x44, 0xd3, 0x1a, 0x3d, 0xa5, 0x6c, 0x5e, 0x63, 0xc1, 0x1f, 0x0f,
	0xa6, 0x17, 0xb8, 0x96, 0xfa, 0x83, 0x2c, 0xd0, 0x28, 0x62, 0x8f, 0x61, 0x48, 0xf5, 0xdd, 0xaa,
	0x27, 0xaf, 0xc7, 0xfc, 0xfd, 0x72, 0x59, 0x4a, 0x63, 0xa2, 0x06, 0x66, 0x8f, 0x60, 0xb0, 0x2a,
	0x71, 0xe3, 0xf7, 0x3a, 0xb4, 0x45, 0x99, 0x0f, 0x3d, 0x42, 0xbf, 0xdf, 0xe1, 0x7a, 0x84, 0x6c,
	0x06, 0x23, 0xb1, 0xc1, 0x4a, 0x93, 0x3f, 0x70, 0xec, 0x5c, 0xa5, 0xdf, 0xce, 0x35, 0x45, 0x0e,
	0x67, 0x0f, 0x61, 0x7f, 0xeb, 0x75, 0x68, 0xbd, 0x8e, 0x65, 0xeb, 0xf3, 0x97, 0x07, 0xf0, 0xf9,
	0xec, 0xe2, 0x6e, 0x5c, 0x1e, 0x43, 0xbf, 0x52, 0xcb, 0x6b, 0x9b, 0xad, 0x91, 0x1a, 0xdc, 0x75,
	0x31, 0xe8, 0xb8, 0x48, 0xe0, 0xbe, 0xeb, 0xb1, 0xed, 0xd9, 0x27, 0x51, 0x14, 0x4a, 0xa7, 0xec,
	0x29, 0x40, 0x9d, 0x37, 0xbe, 0xdd, 0xd2, 0x7e, 0xcd, 0x59, 0x3d, 0x3b, 0x81, 0x31, 0xa1, 0x93,
	0x75, 0xad, 0xed, 0x11, 0x5a, 0x51, 0xf0, 0xdb, 0x03, 0xe6, 0xaa, 0x9c, 0x6b, 0x45, 0x91, 0xfc,
	0x5e, 0x49, 0x43, 0x2c, 0x80, 0x3d, 0x2c, 0x45, 0x92, 0x4b, 0xe3, 0x7b, 0xb3, 0xfe, 0x6e, 0xa8,
	0x23, 0xd8, 0x2b, 0xb8, 0xe7, 0xd6, 0x28, 0x16, 0x0d, 0xf7, 0x4f, 0x99, 0x43, 0x27, 0x70, 0x77,
	0xf6, 0x1c, 0x46, 0xb6, 0xac, 0xf1, 0xfb, 0x36, 0xeb, 0x11, 0xbf, 0xe5, 0x0b, 0x23, 0xa7, 0x09,
	0x7e, 0x82, 0xff, 0xa5, 0xc4, 0x44, 0x1a, 0x73, 0xfa, 0x43, 0x6a, 0x9a, 0x0b, 0x4a, 0xb2, 0xd6,
	0x20, 0x87, 0xc9, 0x8a, 0xe2, 0x65, 0x33, 0xa1, 0xd6, 0xe4, 0x01, 0xbf, 0xb9, 0x5d, 0x11, 0xac,
	0xc8, 0x1d, 0x0d, 0xe3, 0x30, 0xd5, 0x37, 0x03, 0x7a, 0x36, 0x60, 0xc2, 0xb7, 0x63, 0x8e, 0x26,
	0x7a, 0xab, 0x0f, 0x1e, 0x5c, 0x37, 0xdf, 0x2e, 0xb8, 0x2b, 0x1b, 0xbc, 0x83, 0xa3, 0x5d, 0xd8,
	0x14, 0xa8, 0x8d, 0x64, 0x27, 0x30, 0x34, 0x35, 0xe0, 0xe6, 0x71, 0xc0, 0x77, 0x54, 0x0d, 0xb7,
	0x18, 0xd9, 0x7f, 0xe7, 0xcd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0xee, 0x87, 0xec, 0xb7,
	0x03, 0x00, 0x00,
}
