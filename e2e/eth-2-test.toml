# First block 0x0.
# number, hash and logsBloom are null in pending block, currently block 0x1.
# "latest" as block number input should fail as there is no latest block.
[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["0x1",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "not contain"
  Expected = [
                '"number"',
                '"hash"',
                '"logsBloom"',
             ]

[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "contains"
  Expected = [
                  '"jsonrpc": "2.0"',
                  '"id": 83',
                  '"error": {',
                  '"code": -32000',
                  '"message": "Server error"',
                  '"data": "no block completed yet"',
             ]

[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["pending",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "contains"
  Expected = [
                '"result": {',
                '"parentHash": "0x0"',
                '"timestamp": "',
                '"jsonrpc": "2.0"',
                '"id": 83'
             ]

# Perform a transaction so can complete the first block
[[TestCases]]
  RunCmd = "loom deploy -b SimpleStore.bin -n SimpleStore -k {{index $.AccountPrivKeyPathList 0}}"
  Datafiles = [
    { Filename = "SimpleStore.bin", Contents = "6060604052341561000f57600080fd5b60d38061001d6000396000f3006060604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c14606e575b600080fd5b3415605857600080fd5b606c60048080359060200190919050506094565b005b3415607857600080fd5b607e609e565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a723058202b229fba38c096f9c9c81ba2633fb4a7b418032de7862b60d1509a4054e2d6bb0029" }
  ]

# Now the third block
# Repeating request for bock "0x1" should now return number, hash and logsBloom field as its no longer the pending block.
# "latest" should now be able to return the last complted block, block "0x2", containg the transaction we just ran.
# With full = false only a list of transaction hashes is returned rather than the full transaction details.
# "ealriest" as block number returns first transaction.
# Entering invalid data for the block number returns a suirtable error.
[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["0x1",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "contains"
  Expected = [
                '"number"',
                '"hash"',
                '"logsBloom"',
             ]

[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "contains"
  Expected = [
              '"result": {',
                '"number": "0x2',
                '"hash": "0x',
                '"parentHash": "0x',
                '"logsBloom": "0x0',
                '"timestamp": "0x',
                '"transactions": [',
                    '"hash": "0x',
                    '"blockHash": "0x',
                    '"blockNumber": "0x',
                    '"transactionIndex": "0x1"',
                    '"from":',
                    '"{{index $.AccountAddressList 0}}"',
                    '"to": "0x',
              '"jsonrpc": "2.0"',
              '"id": 83'
             ]

[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",false],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "not contains"
  Expected = [
                    '"blockHash"',
                    '"blockNumber"',
                    '"transactionIndex"',
                    '"from"',
                    '"to"'
             ]
[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",false],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "contains"
  Expected = [
              '"result": {',
                '"number": "0x2',
                '"hash": "0x',
                '"parentHash": "0x',
                '"logsBloom": "0x0"',
                '"timestamp": "0x',
                '"transactions": [',
              '"jsonrpc": "2.0"',
              '"id": 83'
             ]

[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["earliest",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "contains"
  Expected = [
                '"result": {',
                '"number": "0x1',
                '"parentHash": "0x0"',
                '"timestamp": "',
                '"jsonrpc": "2.0"',
                '"id": 83'
             ]

 [[TestCases]]
   RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["nonsese",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
   Condition = "contains"
   Expected = [
                  '"jsonrpc": "2.0"',
                  '"id": 83',
                  '"error": {',
                  '"code": -32000',
                  '"message": "Server error"',
                  '"data": "strconv.ParseInt: parsing \"nonsese\": invalid syntax"',
              ]