# First block 0x0.
# pending block not implemented yet
# "latest" as block number input should fail as there is no latest block.

# Perform a transaction so can complete the first block
[[TestCases]]
  Dir = ""
  RunCmd = "{{ $.LoomPath }} coin transfer {{index $.AccountAddressList 1}} 20000000 -k {{index $.AccountPrivKeyPathList 2}}"
  Condition = ""
  Delay = 500

# Now the third and later blocks
# Repeating request for bock "0x1" should now return number, hash and logsBloom field as its no longer the pending block.
# "latest" should now be able to return the last complted block, block "0x2", containg the transaction we just ran.
# With full = false only a list of transaction hashes is returned rather than the full transaction details.
# "earliest" as block number returns first transaction.
# Entering invalid data for the block number returns a suitable error.
[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["0x1",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "contains"
  Expected = [
              '"result": {',
                '"hash": "0x',
                '"parentHash": "0x',
                '"logsBloom": "0x0',
                '"timestamp": "0x',
              '"jsonrpc": "2.0"',
              '"id": 83'
             ]

[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",false],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "excludes"
  Expected = [
                    '"blockHash"',
                    '"blockNumber"',
                    '"transactionIndex"',
                    '"from"',
                    '"to"'
             ]
[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",false],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "contains"
  Expected = [
              '"result": {',
                '"hash": "0x',
                '"parentHash": "0x',
                '"logsBloom": "0x0"',
                '"timestamp": "0x',
              '"jsonrpc": "2.0"',
              '"id": 83'
             ]

[[TestCases]]
  RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["earliest",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
  Condition = "contains"
  Expected = [
                '"result": {',
                '"number": "0x1',
                '"parentHash": "0x0"',
                '"timestamp": "',
                '"jsonrpc": "2.0"',
                '"id": 83'
             ]

 [[TestCases]]
   RunCmd = '/usr/bin/curl -X POST --data {"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["nonsese",true],"id":83} {{index $.NodeProxyAppAddressList 0}}/eth'
   Condition = "contains"
   Expected = [
                  '"jsonrpc": "2.0"',
                  '"id": 83',
                  '"error": {',
                  '"code": -32000',
                  '"message": "Server error"',
                  '"data": "loom error: parse block height: strconv.ParseUint: parsing \"nonsese\": invalid syntax"',
              ]