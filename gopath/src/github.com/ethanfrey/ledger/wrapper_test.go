package ledger

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestWrapCommand(t *testing.T) {
	assert, require := assert.New(t), require.New(t)

	channel := uint16(0x0101)
	size := 64

	cases := []struct {
		input  string
		output string
	}{
		{"31323334353637383930",
			"0101050000000a313233343536373839300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		{"74686973206973206120612062756e6368206f662072616e646f6d2064617461",
			"0101050000002074686973206973206120612062756e6368206f662072616e646f6d206461746100000000000000000000000000000000000000000000000000"},
		{"6d6f7265207468616e2036342062797465732c20736f2069742077726170732061726f756e646d6f7265207468616e2036342062797465732c20736f2069742077726170732061726f756e646d6f7265207468616e2036342062797465732c20736f2069742077726170732061726f756e646d6f7265207468616e2036342062797465732c20736f2069742077726170732061726f756e646d6f7265207468616e2036342062797465732c20736f2069742077726170732061726f756e646d6f7265207468616e2036342062797465732c20736f2069742077726170732061726f756e64",
			"010105000000e46d6f7265207468616e2036342062797465732c20736f2069742077726170732061726f756e646d6f7265207468616e2036342062797465732c010105000120736f2069742077726170732061726f756e646d6f7265207468616e2036342062797465732c20736f2069742077726170732061726f756e646d6f01010500027265207468616e2036342062797465732c20736f2069742077726170732061726f756e646d6f7265207468616e2036342062797465732c20736f20010105000369742077726170732061726f756e646d6f7265207468616e2036342062797465732c20736f2069742077726170732061726f756e64000000000000"},
		{"deadbeef1234560000deadbeef123456000000dead",
			"01010500000015deadbeef1234560000deadbeef123456000000dead000000000000000000000000000000000000000000000000000000000000000000000000"},
	}

	for i, tc := range cases {
		hexIn, err := hex.DecodeString(tc.input)
		require.Nil(err, "%d: %+v", i, err)
		hexOut, err := hex.DecodeString(tc.output)
		require.Nil(err, "%d: %+v", i, err)

		msg := WrapCommandAPDU(channel, hexIn, size, false)
		assert.Equal(hexOut, msg, "%d", i)

		machine := NewEcho(size)
		machine.Write(msg)
		resp, err := UnwrapResponseAPDU(channel, machine.ReadCh(), size, false)
		assert.Nil(err, "%d: %+v", i, err)
		assert.Equal(hexIn, resp, "%d", i)
	}
}
